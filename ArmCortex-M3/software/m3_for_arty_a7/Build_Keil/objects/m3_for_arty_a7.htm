<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\m3_for_arty_a7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\m3_for_arty_a7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Jul 20 14:40:57 2021
<BR><P>
<H3>Maximum Stack Usage =       1216 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Main_Loop &rArr; PC_Recv &rArr; xil_printf &rArr; outnum &rArr; padding
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6c]">atomic_test</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[17]">Unused_IRQ10</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">Unused_IRQ10</a><BR>
 <LI><a href="#[a2]">XUartLite_SendByte</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a2]">XUartLite_SendByte</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[14]">DAPLinkFittedn</a> from main.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[11]">DAP_QSPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[13]">DAP_QSPI_XIP_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[12]">DAP_SPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[16]">ESP32_GPIO_Handler</a> from gpio.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[15]">ESP32_UART_Handler</a> from uart.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[8c]">EspRecvHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[8b]">EspSendHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[e]">GPIO0_Handler</a> from gpio.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[f]">GPIO1_Handler</a> from gpio.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[10]">QSPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[86]">RecvHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[34]">Reset_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[84]">SendHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[30]">StubHandler</a> from xuartlite.o(.text) referenced from xuartlite.o(.text)
 <LI><a href="#[2f]">StubStatusHandler</a> from xspi.o(.text) referenced from xspi.o(.text)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2d]">SystemInit</a> from system_arty_cm3.o(.text) referenced from startup_arty_cm3.o(.text)
 <LI><a href="#[d]">UART0_Handler</a> from uart.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[17]">Unused_IRQ10</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[18]">Unused_IRQ11</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[19]">Unused_IRQ12</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1a]">Unused_IRQ13</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1b]">Unused_IRQ14</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1c]">Unused_IRQ15</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1d]">Unused_IRQ16</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1e]">Unused_IRQ17</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1f]">Unused_IRQ18</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[20]">Unused_IRQ19</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[21]">Unused_IRQ20</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[22]">Unused_IRQ21</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[23]">Unused_IRQ22</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[24]">Unused_IRQ23</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[25]">Unused_IRQ24</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[26]">Unused_IRQ25</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[27]">Unused_IRQ26</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[28]">Unused_IRQ27</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[29]">Unused_IRQ28</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2a]">Unused_IRQ29</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2b]">Unused_IRQ30</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2c]">Unused_IRQ31</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[35]">__main</a> from __main.o(!!!main) referenced from startup_arty_cm3.o(.text)
 <LI><a href="#[31]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[33]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[32]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[37]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[39]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[e3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3b]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3d]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3e]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[40]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[e4]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[48]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e5]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[42]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[e7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[44]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[eb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[4d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[fa]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[fc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[38]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[102]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[45]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[47]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[103]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[49]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Main_Loop &rArr; PC_Recv &rArr; xil_printf &rArr; outnum &rArr; padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[104]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[df]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[105]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[106]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm3.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(.text)
</UL>
<P><STRONG><a name="[34]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Unused_IRQ10</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unused_IRQ10
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unused_IRQ10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Unused_IRQ11</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Unused_IRQ12</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Unused_IRQ13</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Unused_IRQ14</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Unused_IRQ15</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Unused_IRQ16</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Unused_IRQ17</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Unused_IRQ18</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Unused_IRQ19</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Unused_IRQ20</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Unused_IRQ21</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Unused_IRQ22</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Unused_IRQ23</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Unused_IRQ24</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Unused_IRQ25</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Unused_IRQ26</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Unused_IRQ27</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Unused_IRQ28</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Unused_IRQ29</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>Unused_IRQ30</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>Unused_IRQ31</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6c]"></a>atomic_test</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, atomic_asm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_access
</UL>

<P><STRONG><a name="[50]"></a>Main_Loop</STRONG> (Thumb, 96 bytes, Stack size 264 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Main_Loop &rArr; PC_Recv &rArr; xil_printf &rArr; outnum &rArr; padding
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_Recv
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Send
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Recv
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>main</STRONG> (Thumb, 1784 bytes, Stack size 768 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216 + Unknown Stack Size
<LI>Call Chain = main &rArr; Main_Loop &rArr; PC_Recv &rArr; xil_printf &rArr; outnum &rArr; padding
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_access
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SelfTest
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_LookupConfig
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_CfgInitialize
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32UART
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32GPIO
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUARTInterrupts
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Send
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableUARTInterrupts
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSPIInterrupts
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[107]"></a>setUartRecv</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>DAPLinkFittedn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>atomic_access</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, atomic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = atomic_access
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_test
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>InitialiseGPIO</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitialiseGPIO &rArr; XGpio_Initialize &rArr; XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>InitialiseEsp32GPIO</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitialiseEsp32GPIO &rArr; XGpio_SetDataDirection &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_LookupConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>EnableGPIOInterrupts</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableGPIOInterrupts &rArr; XGpio_InterruptGlobalEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>GPIO0_Handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO0_Handler &rArr; XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIO1_Handler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO1_Handler &rArr; XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ESP32_GPIO_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ESP32_GPIO_Handler &rArr; XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>ESP32_GPIO_Cfg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ESP32_GPIO_Cfg &rArr; XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32UART
</UL>

<P><STRONG><a name="[78]"></a>ESP32_GPIO_Read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>

<P><STRONG><a name="[79]"></a>SetDAPLinkQSPIMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>

<P><STRONG><a name="[7a]"></a>IncLeds</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>

<P><STRONG><a name="[7b]"></a>ClearLeds</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>

<P><STRONG><a name="[108]"></a>getUartRecv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>InitialiseSPI</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitialiseSPI &rArr; XSpi_Initialize &rArr; XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>DisableSPIInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>InitQSPIBaseFlash</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>WriteQSPIBaseFlash</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WriteQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>ReadQSPIBaseFlash</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>WriteSPIData</STRONG> (Thumb, 122 bytes, Stack size 96 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[10]"></a>QSPI0_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DAP_QSPI0_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DAP_SPI0_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DAP_QSPI_XIP_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>RecvHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>SendHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>InitialiseUART</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitialiseUART &rArr; XUartLite_Initialize &rArr; XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>EspRecvHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>EspSendHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>InitialiseEsp32UART</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitialiseEsp32UART &rArr; XUartLite_Recv &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_LookupConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_GPIO_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>CheckUARTRxBytes</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>EnableUARTInterrupts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableUARTInterrupts &rArr; XUartLite_EnableInterrupt &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>DisableUARTInterrupts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DisableUARTInterrupts &rArr; XUartLite_DisableInterrupt &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_DisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d]"></a>UART0_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART0_Handler &rArr; XUartLite_InterruptHandler &rArr; ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>ESP32_UART_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ESP32_UART_Handler &rArr; XUartLite_InterruptHandler &rArr; ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>bufferedUartSend1</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bufferedUartSend1 &rArr; XUartLite_Send &rArr; XUartLite_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_IsSending
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Send
</UL>

<P><STRONG><a name="[56]"></a>ESP_Send</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ESP_Send &rArr; bufferedUartSend1 &rArr; XUartLite_Send &rArr; XUartLite_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_IsSending
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufferedUartSend1
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop
</UL>

<P><STRONG><a name="[51]"></a>ESP_Recv</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ESP_Recv &rArr; xil_printf &rArr; outnum &rArr; padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_IsSending
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop
</UL>

<P><STRONG><a name="[54]"></a>PC_Recv</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PC_Recv &rArr; xil_printf &rArr; outnum &rArr; padding
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_IsSending
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop
</UL>

<P><STRONG><a name="[95]"></a>XSpi_Abort</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, xspi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
</UL>

<P><STRONG><a name="[7d]"></a>XSpi_Reset</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XSpi_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
</UL>

<P><STRONG><a name="[96]"></a>XSpi_CfgInitialize</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
</UL>

<P><STRONG><a name="[7e]"></a>XSpi_Start</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XSpi_Start &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
</UL>

<P><STRONG><a name="[97]"></a>XSpi_Stop</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[80]"></a>XSpi_Transfer</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
</UL>

<P><STRONG><a name="[7f]"></a>XSpi_SetSlaveSelect</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XSpi_SetSlaveSelect &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
</UL>

<P><STRONG><a name="[98]"></a>XSpi_GetSlaveSelect</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[99]"></a>XSpi_SetStatusHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[9a]"></a>XSpi_InterruptHandler</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
</UL>

<P><STRONG><a name="[9b]"></a>XSpi_LookupConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, xspi_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XSpi_LookupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
</UL>

<P><STRONG><a name="[7c]"></a>XSpi_Initialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xspi_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XSpi_Initialize &rArr; XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_LookupConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
</UL>

<P><STRONG><a name="[8a]"></a>XUartLite_CfgInitialize</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ClearStats
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32UART
</UL>

<P><STRONG><a name="[9d]"></a>XUartLite_SendBuffer</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XUartLite_SendBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
</UL>

<P><STRONG><a name="[93]"></a>XUartLite_Send</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = XUartLite_Send &rArr; XUartLite_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufferedUartSend1
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Send
</UL>

<P><STRONG><a name="[9e]"></a>XUartLite_ReceiveBuffer</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XUartLite_ReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
</UL>

<P><STRONG><a name="[88]"></a>XUartLite_Recv</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XUartLite_Recv &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_Recv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32UART
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Recv
</UL>

<P><STRONG><a name="[9f]"></a>XUartLite_ResetFifos</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[92]"></a>XUartLite_IsSending</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XUartLite_IsSending &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bufferedUartSend1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_Recv
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Send
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Recv
</UL>

<P><STRONG><a name="[87]"></a>XUartLite_SetRecvHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_SetRecvHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32UART
</UL>

<P><STRONG><a name="[85]"></a>XUartLite_SetSendHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_SetSendHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32UART
</UL>

<P><STRONG><a name="[8f]"></a>XUartLite_InterruptHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XUartLite_InterruptHandler &rArr; ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataHandler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_UART_Handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[8e]"></a>XUartLite_DisableInterrupt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_DisableInterrupt &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableUARTInterrupts
</UL>

<P><STRONG><a name="[8d]"></a>XUartLite_EnableInterrupt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_EnableInterrupt &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUARTInterrupts
</UL>

<P><STRONG><a name="[a2]"></a>XUartLite_SendByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xuartlite_l.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>

<P><STRONG><a name="[a3]"></a>XUartLite_RecvByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xuartlite_l.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_RecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_RecvByte
</UL>

<P><STRONG><a name="[89]"></a>XUartLite_LookupConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xuartlite_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XUartLite_LookupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32UART
</UL>

<P><STRONG><a name="[83]"></a>XUartLite_Initialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xuartlite_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XUartLite_Initialize &rArr; XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_LookupConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[a4]"></a>XUartLite_GetStats</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, xuartlite_stats.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[9c]"></a>XUartLite_ClearStats</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, xuartlite_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
</UL>

<P><STRONG><a name="[71]"></a>XGpio_CfgInitialize</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32GPIO
</UL>

<P><STRONG><a name="[6e]"></a>XGpio_SetDataDirection</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_SetDataDirection &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32GPIO
</UL>

<P><STRONG><a name="[a5]"></a>XGpio_GetDataDirection</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, xgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[74]"></a>XGpio_DiscreteRead</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_DiscreteRead &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLeds
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncLeds
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_GPIO_Read
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_GPIO_Cfg
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[6f]"></a>XGpio_DiscreteWrite</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearLeds
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncLeds
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDAPLinkQSPIMode
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_GPIO_Cfg
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32GPIO
</UL>

<P><STRONG><a name="[73]"></a>XGpio_InterruptGlobalEnable</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_InterruptGlobalEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
</UL>

<P><STRONG><a name="[a6]"></a>XGpio_InterruptGlobalDisable</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[72]"></a>XGpio_InterruptEnable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_InterruptEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
</UL>

<P><STRONG><a name="[a7]"></a>XGpio_InterruptDisable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[75]"></a>XGpio_InterruptClear</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_GPIO_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[a8]"></a>XGpio_InterruptGetEnabled</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[a9]"></a>XGpio_InterruptGetStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[70]"></a>XGpio_LookupConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xgpio_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XGpio_LookupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseEsp32GPIO
</UL>

<P><STRONG><a name="[6d]"></a>XGpio_Initialize</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xgpio_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_Initialize &rArr; XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_LookupConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>

<P><STRONG><a name="[aa]"></a>outbyte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, outbyte.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outnum
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outs
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padding
</UL>

<P><STRONG><a name="[52]"></a>print</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = print
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop
</UL>

<P><STRONG><a name="[94]"></a>Xil_Assert</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xil_assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetStatus
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetEnabled
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptDisable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalDisable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_GetDataDirection
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_GetStats
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ClearStats
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ResetFifos
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StubHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetStatusHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_GetSlaveSelect
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StubStatusHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_IsSending
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_DisableInterrupt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SelfTest
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_CfgInitialize
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetTempWaitCycles
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_DisableTempUpdate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_EnableTempUpdate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_DisableUserOverTemp
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_EnableUserOverTemp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetOverTemp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetOverTemp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetAlarmThreshold
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetAlarmThreshold
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetSeqAcqTime
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSeqAcqTime
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetSeqInputMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSeqInputMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetSeqAvgEnables
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSeqAvgEnables
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetSeqChEnables
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSeqChEnables
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetAdcClkDivisor
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetAdcClkDivisor
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetExtenalMux
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSequencerEvent
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSequencerMode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetCalibEnables
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetCalibEnables
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetAlarmEnables
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetAlarmEnables
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSingleChParams
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetSequencerMode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetAvg
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetAvg
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetMinMaxMeasurement
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetCalibCoefficient
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetAdcData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_ResetAdc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_StartAdcConversion
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetAlarmOutputStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetStatus
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_Reset
</UL>

<P><STRONG><a name="[10a]"></a>Xil_AssertSetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>XNullHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>xil_printf</STRONG> (Thumb, 426 bytes, Stack size 72 bytes, xil_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xil_printf &rArr; outnum &rArr; padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outnum
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outs
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_Recv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Recv
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop
</UL>

<P><STRONG><a name="[b1]"></a>XSysMon_Reset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, xsysmon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XSysMon_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SelfTest
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_CfgInitialize
</UL>

<P><STRONG><a name="[69]"></a>XSysMon_CfgInitialize</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, xsysmon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XSysMon_CfgInitialize &rArr; XSysMon_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>XSysMon_GetStatus</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b3]"></a>XSysMon_GetAlarmOutputStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b4]"></a>XSysMon_StartAdcConversion</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b5]"></a>XSysMon_ResetAdc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b6]"></a>XSysMon_GetAdcData</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b7]"></a>XSysMon_GetCalibCoefficient</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b8]"></a>XSysMon_GetMinMaxMeasurement</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[b9]"></a>XSysMon_SetAvg</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[ba]"></a>XSysMon_GetAvg</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[bb]"></a>XSysMon_GetSequencerMode</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSeqAcqTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSeqInputMode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSeqAvgEnables
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSeqChEnables
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetSingleChParams
</UL>

<P><STRONG><a name="[bc]"></a>XSysMon_SetSingleChParams</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetSequencerMode
</UL>

<P><STRONG><a name="[bd]"></a>XSysMon_SetAlarmEnables</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[be]"></a>XSysMon_GetAlarmEnables</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[bf]"></a>XSysMon_SetCalibEnables</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[c0]"></a>XSysMon_GetCalibEnables</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[c1]"></a>XSysMon_SetSequencerMode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[c2]"></a>XSysMon_SetSequencerEvent</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[c3]"></a>XSysMon_SetExtenalMux</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[c4]"></a>XSysMon_SetAdcClkDivisor</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[c5]"></a>XSysMon_GetAdcClkDivisor</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[c6]"></a>XSysMon_SetSeqChEnables</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetSequencerMode
</UL>

<P><STRONG><a name="[c7]"></a>XSysMon_GetSeqChEnables</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[c8]"></a>XSysMon_SetSeqAvgEnables</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetSequencerMode
</UL>

<P><STRONG><a name="[c9]"></a>XSysMon_GetSeqAvgEnables</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[ca]"></a>XSysMon_SetSeqInputMode</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetSequencerMode
</UL>

<P><STRONG><a name="[cb]"></a>XSysMon_GetSeqInputMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[cc]"></a>XSysMon_SetSeqAcqTime</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetSequencerMode
</UL>

<P><STRONG><a name="[cd]"></a>XSysMon_GetSeqAcqTime</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[ce]"></a>XSysMon_SetAlarmThreshold</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, xsysmon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XSysMon_SetAlarmThreshold &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SelfTest
</UL>

<P><STRONG><a name="[cf]"></a>XSysMon_GetAlarmThreshold</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, xsysmon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XSysMon_GetAlarmThreshold &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SelfTest
</UL>

<P><STRONG><a name="[d0]"></a>XSysMon_SetOverTemp</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[d1]"></a>XSysMon_GetOverTemp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[d2]"></a>XSysMon_EnableUserOverTemp</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[d3]"></a>XSysMon_DisableUserOverTemp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[d4]"></a>XSysMon_EnableTempUpdate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[d5]"></a>XSysMon_DisableTempUpdate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[d6]"></a>XSysMon_SetTempWaitCycles</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xsysmon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[6a]"></a>XSysMon_SelfTest</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, xsysmon_selftest.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XSysMon_SelfTest &rArr; XSysMon_GetAlarmThreshold &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_GetAlarmThreshold
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_SetAlarmThreshold
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSysMon_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>XSysMon_LookupConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xsysmon_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XSysMon_LookupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getnum
</UL>

<P><STRONG><a name="[b0]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>

<P><STRONG><a name="[62]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[dc]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3c]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[3f]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[10c]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Loop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outnum
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outs
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outnum
</UL>

<P><STRONG><a name="[10d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[da]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d7]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[32]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[dd]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[41]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[113]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[114]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[46]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4b]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[115]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5c]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAPLinkFittedn
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_GPIO_Handler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[82]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SPI0_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_QSPI0_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI0_Handler
</UL>

<P><STRONG><a name="[90]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP32_UART_Handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[2f]"></a>StubStatusHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StubStatusHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xspi.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>StubHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StubHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xuartlite.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>SendDataHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendDataHandler &rArr; XUartLite_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>

<P><STRONG><a name="[a1]"></a>ReceiveDataHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>

<P><STRONG><a name="[ab]"></a>padding</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, xil_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outnum
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outs
</UL>

<P><STRONG><a name="[ac]"></a>outs</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xil_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = outs &rArr; padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padding
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>

<P><STRONG><a name="[ad]"></a>outnum</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, xil_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = outnum &rArr; padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padding
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>

<P><STRONG><a name="[ae]"></a>getnum</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, xil_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getnum &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xil_printf
</UL>

<P><STRONG><a name="[33]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
